{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","aria-disabled","style","marginRight","backgroundColor","value","onClick","e","changeModeColor","target","toggleMode","htmlFor","TextForm","text","setText","useState","color","heading","onChange","event","rows","disabled","length","handleUpClick","newText","toUpperCase","showAlert","handleLowerClick","toLowerCase","handleClearText","handleExtraSpace","nexText","split","join","handleCopy","navigator","clipboard","writeText","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","modeColor","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6ffcd0a7.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                     {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n                    <a className=\"nav-link\" href=\"#\">About</a>\r\n                    </li>\r\n                    <li className=\"nav-item dropdown\">\r\n                    <a className=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                        Dropdown\r\n                    </a>\r\n                    <ul className=\"dropdown-menu\">\r\n                        <li><a className=\"dropdown-item\" href=\"#\">Action</a></li>\r\n                        <li><a className=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n                        <li><hr className=\"dropdown-divider\"/></li>\r\n                        <li><a className=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n                    </ul>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <a className=\"nav-link disabled\" aria-disabled=\"true\" href='#'>Disabled</a>\r\n                    </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\" role=\"search\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\" style={{marginRight : '20px'}}>\r\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{backgroundColor : '#363062'}} value=\"blue\" onClick = {(e)=> props.changeModeColor(e.target.value)}>Blue</button>\r\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{backgroundColor : '#435585'}} value=\"grey\" onClick = {(e)=> props.changeModeColor(e.target.value)}>Grey</button>\r\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{backgroundColor : '#32012F'}} value=\"purple\" onClick = {(e)=> props.changeModeColor(e.target.value)}>Purple</button>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode </label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        </>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    // Value entered will be stored in text variable and setText function will be used to update the value of state variable text.\r\n    // Value passed as parameter to useState hook is default value\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"Uppercase was clicked\" +text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Uppercase.', 'success');\r\n    }\r\n\r\n    const handleLowerClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Lowercase.', 'success');\r\n    }\r\n\r\n    const handleExtraSpace = ()=>{\r\n        let nexText = text.split(/[ ]+/);\r\n        setText(nexText.join(\" \"));\r\n        props.showAlert('Extra spaces successfully removed from text.', 'success');\r\n    }\r\n\r\n    const handleClearText = ()=>{\r\n        setText('');\r\n        props.showAlert('Text is cleared.', 'success');\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('Text copied to clipboard', 'success');\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"Handle on change.\");\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n      <>\r\n        <div className='container' style = {{color : props.mode==='light'?'black':'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"form-group\">\r\n                <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style = {{backgroundColor : props.mode==='light'?'white':'grey', color : props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled = {text.length===0} className='btn btn-primary mx-1 my-1' onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled = {text.length===0} className='btn btn-primary mx-1 my-1' onClick={handleLowerClick}>Convert to Lowercase</button>\r\n            <button disabled = {text.length===0} className='btn btn-primary mx-1 my-1' onClick={handleClearText}>Clear Text</button>\r\n            <button disabled = {text.length===0} className='btn btn-primary mx-1 my-1' onClick={handleExtraSpace}>Remove Extra Space</button>\r\n            <button disabled = {text.length===0} className='btn btn-primary mx-1 my-1' onClick={handleCopy}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style = {{color : props.mode==='light'?'black':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=> {return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=> {return element.length!==0}).length} minutes read.</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    };\r\n  return (\r\n         <div style={{height : '50px'}}>\r\n              {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n              <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n               </div>}\r\n         </div>\r\n        \r\n  )\r\n}\r\n","\nimport React, { useState } from 'react';\nimport './App.css';\n//import About from './components/About.js';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm.js';\nimport Alert from './components/Alert.js';\n// import About from './components/About.js';\n// import {\n//    BrowserRouter as Router,\n//    Routes,\n//    Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n         msg : message,\n         type :type\n      })\n\n      setTimeout(()=>{\n         setAlert(null);\n      }, 1000);\n  }\n\n\n\n  const toggleMode = ()=>{\n     if(mode === 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = '#33363d';\n        showAlert('Dark mode is enabled.', 'success');\n        document.title = \"TextUtils - Dark Mode\";   // To change the page title dynamically\n     }\n     else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode is enabled.', 'success');\n      document.title = \"TextUtils - Light Mode\";\n     }\n  };\n\n  const changeModeColor = (modeColor)=>{\n      if(modeColor === 'blue'){\n         document.body.style.backgroundColor = '#363062';\n         showAlert('Blue mode enabled.', 'success');\n      }\n      else if(modeColor==='grey'){\n         document.body.style.backgroundColor = '#435585';\n         showAlert('Grey mode is enabled.', 'success');\n      \n      }\n      else{\n         document.body.style.backgroundColor = '#32012F';\n         showAlert('Purple mode is enabled.', 'success');\n      }\n};\n  return (\n    <>\n    {/* <Router> */}\n     <Navbar title=\"TextUtils\" mode = {mode} toggleMode={toggleMode} changeModeColor={changeModeColor}/>\n      <Alert alert = {alert}/>\n      \n     <div className=\"container my-3\">\n     <TextForm showAlert = {showAlert} heading = \"Enter the text to analyze\" mode = {mode}/>\n         {/* <Routes>\n            <Route exact path=\"/about\" element={<About/>}/> */}\n            {/* <Route exact   path=\"/\" element={<TextForm showAlert = {showAlert} heading = \"Enter the text to analyze\" mode = {mode}/>}/>\n         </Routes> */}\n        \n        {/* <About/> */}\n     </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}